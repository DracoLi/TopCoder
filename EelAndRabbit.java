import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class EelAndRabbit
{
	public int getmax(int[] l, int[] t)
	{
		int maxTime = 0;
		int n = l.length;
		for (int i = 0; i < n; i++) {
			maxTime = Math.max(maxTime, l[i] + t[i]);
		}
		
		int maxCount = 0;
		int firstMax = 0;
		int res = 0;
		for (int i = 0; i <= maxTime; i++) {
			int c = count(i, l, t);
			if (c > maxCount) {
				firstMax = i;
				maxCount = c;
			}
		}
		
		res = maxCount;
		maxCount = 0;
		for (int i = 0; i <= maxTime; i++) {
			if (i == firstMax) continue;
			int c = 0;
			for (int j = 0; j < n; j++) {
				int tc = t[j];
				int lc = l[j];
				if (!intersect(tc, lc, firstMax) &&
					intersect(tc, lc, i)) {
					c++;
				}
			}
			maxCount = Math.max(maxCount, c);
		}
		
		return maxCount + res;

//		Method 2		
//		int res = 0;
//		for (int i = 0; i < n; i++) {
//			for (int j = i; j < n; j++) {
//				int x = t[i], y = t[j];
//				int c = 0;
//				for (int k = 0; k < n; k++) {
//					boolean insect1 = intersect(t[k], l[k], x);
//					boolean insect2 = intersect(t[k], l[k], y);
//					if (insect1 || insect2) c++;
//				}
//				res = Math.max(res, c);
//				
//			}
//		}
//		return res;
	}
	
	private boolean intersect(int t, int l, int n) {
		return (t <= n && n <= t + l);
	}
	
	private int count(int n, int[] l, int[] t) {
		int N = l.length;
		int c = 0;
		for (int i = 0; i < N; i++) {
			int tc = t[i];
			int lc = l[i];
			if (intersect(tc, lc, n)) {
				c++;
			}
		}
		return c;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		EelAndRabbit obj;
		int answer;
		obj = new EelAndRabbit();
		long startTime = System.currentTimeMillis();
		answer = obj.getmax(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		int p2;
		
		// ----- test 0 -----
		p0 = new int[]{2,4,3,2,2,1,10};
		p1 = new int[]{2,6,3,7,0,2,0};
		p2 = 6;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{1,1,1};
		p1 = new int[]{2,0,4};
		p2 = 2;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{1};
		p1 = new int[]{1};
		p2 = 1;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{8,2,1,10,8,6,3,1,2,5};
		p1 = new int[]{17,27,26,11,1,27,23,12,11,13};
		p2 = 7;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
